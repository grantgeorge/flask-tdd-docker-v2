name: Continuous Integration and Delivery

on:
  push:
    branches:
      - main

env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/web

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.WEB_IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.WEB_IMAGE }}:latest \
            --tag ${{ env.WEB_IMAGE }}:latest \
            --file ./Dockerfile.prod \
            "./"
      - name: Push image
        run: |
          docker push ${{ env.WEB_IMAGE }}:latest

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    env:
      POSTGRES_DB: users
      POSTGRES_USER: runner
      POSTGRES_PASSWORD: runner
      DATABASE_URL: postgresql://runner:runner@postgres:5432/users
      DATABASE_TEST_URL: postgresql://runner:runner@postgres:5432/users
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.WEB_IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.WEB_IMAGE }}:latest \
            --tag ${{ env.WEB_IMAGE }}:latest \
            --file ./Dockerfile.web \
            "./"
      - name: Run container
        run: |
          docker run \
            -d \
            --name flask-tdd \
            -e PORT=8765 \
            -e ENVIRONMENT=testing \
            -e DATABASE_URL=postgresql://postgres:postgres@not:5432/real \
            -p 5005:8765 \
            ${{ env.WEB_IMAGE }}:latest
      - name: Pytest
        run: docker exec flask-tdd python -m pytest "src/tests" -p no:warnings"
      - name: Flake8
        run: docker exec flask-tdd python -m flake8 .
      - name: Black
        run: docker exec flask-tdd python -m black . --check
      - name: isort
        run: docker exec flask-tdd python -m isort . --check-only
