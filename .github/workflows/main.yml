name: CI/CD

env:
  # Enable Buildkit and let compose use it to speed up image building
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  FLASK_APP: src/__init__.py
  FLASK_DEBUG: 0
  FLASK_ENV: production
  APP_SETTINGS: src.config.DevelopmentConfig
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flask-tdd
  DATABASE_TEST_URL: postgresql://postgres:postgres@localhost:5432/flask-tdd-test

on:
  push:
    branches:
      - '*'

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flask-tdd
        options:  >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: false
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest "src/tests" -p no:warnings
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      - name: Format (black)
        run: |
          source .venv/bin/activate
          black src --check
      - name: Run isort
        run: |
          source .venv/bin/activate
          isort src --check-only --profile black
      - name: Run flake8
        run: |
          source .venv/bin/activate
          flake8 src
  deploy:
    runs-on: ubuntu-latest
    needs: [tests, code-quality]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build, Push, and Release a Docker container to Heroku.
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          dockerfile_name: Dockerfile.prod
